select(trip_type) %>%
purrr::set_names(nm = c('x')) %>%
mutate(id = 1:n()) %>%
group_by(x) %>%
tally() %>%
rename( count = n)
gr%>%
plot_ly(labels = ~x, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = paste("Composición de la variable tripType ,respecto a las canastas (variable upc)"),
showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE)) %>%
layout(legend = list(orientation = 'h'))
cuantos(train$VisitNumber)
dt <- train %>% count(VisitNumber) %>%  mutate(prop = round(prop.table(n)*100,4))%>% arrange(desc(prop)) %>% head()
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
gr <- train %>%
select(TripType, VisitNumber) %>%
unique() %>%
select(TripType) %>%
purrr::set_names(nm = c('x')) %>%
mutate(id = 1:n()) %>%
group_by(x) %>%
tally() %>%
rename( count = n)
gr%>%
plot_ly(labels = ~x, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = paste("Composición de la variable tripType ,respecto a las canastas (variable visitNumber)"),
showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE)) %>%
layout(legend = list(orientation = 'h'))
cuantos(train$Weekday)
dt <- train %>%select(VisitNumber, Weekday) %>% unique %>%  count(Weekday) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
library("purrr")
ggplotly(  train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ungroup %>%
group_by(x) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup %>%
ggplot(aes(x = x, y = porc))+
geom_col(aes(fill = y), width = 0.7)+
theme_minimal()+
labs(title = 'Composición de variables categóricas de acuerdo a los productos',
x = 'TripType',
y = 'Porcentaje',
fill = 'Weekday')+
theme(axis.text.x = element_text(angle = 90))) %>%
layout(legend = list(orientation = 'h'))
ggplotly(  train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
purrr::set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ungroup %>%
group_by(x) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup %>%
ggplot(aes(x = x, y = porc))+
geom_col(aes(fill = y), width = 0.7)+
theme_minimal()+
labs(title = 'Composición de variables categóricas de acuerdo a los productos',
x = 'TripType',
y = 'Porcentaje',
fill = 'Weekday')+
theme(axis.text.x = element_text(angle = 90))) %>%
layout(legend = list(orientation = 'h'))
library(tidyverse)
library(readr)
library(knitr)
library(plotly)
library(feather)
library(kableExtra)
library(janitor)
library(tidygraph)
library(visNetwork)
library(ggraph)
library(purrr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(knitr)
library(plotly)
library(feather)
library(kableExtra)
library(janitor)
library(tidygraph)
library(visNetwork)
library(ggraph)
library(purrr)
knitr::opts_chunk$set(echo = TRUE)
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
paquetes <- c("odbc","readr", "stringr", "dplyr", "tidyverse", "bookdown",
"funModeling","magrittr")
lapply(paquetes, instalar)
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
library(tidyverse)
library(readr)
library(knitr)
library(plotly)
library(feather)
library(kableExtra)
library(janitor)
library(tidygraph)
library(visNetwork)
library(ggraph)
library(purrr)
knitr::opts_chunk$set(echo = TRUE)
ggplotly(  train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ungroup %>%
group_by(x) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup %>%
ggplot(aes(x = x, y = porc))+
geom_col(aes(fill = y), width = 0.7)+
theme_minimal()+
labs(title = 'Composición de variables categóricas de acuerdo a los productos',
x = 'TripType',
y = 'Porcentaje',
fill = 'Weekday')+
theme(axis.text.x = element_text(angle = 90))) %>%
layout(legend = list(orientation = 'h'))
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
paquetes <- c("odbc","readr", "stringr", "dplyr", "tidyverse", "bookdown",
"funModeling","magrittr")
lapply(paquetes, instalar)
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
library(tidyverse)
library(readr)
library(knitr)
library(plotly)
library(feather)
library(kableExtra)
library(janitor)
library(tidygraph)
library(visNetwork)
library(ggraph)
library(purrr)
knitr::opts_chunk$set(echo = TRUE)
train <- read_feather('datos/train.feather')
cuantos <- function(x){
length(unique(x))
}
# Funciones para crear una tabla con distribuciones porcentales de los campos en una columna
distrib <- function(x){
tablita <- table(x)
df <- cbind(tablita,round(prop.table(tablita)*100,4))
colnames(df) <- c('Frecuencia','Porcentaje')
df
}
distrib_val <- function(x,n){
do.call(rbind,lapply(x[n],distrib))
}
summary(train)
cuantos(train$Upc)
dt <- train %>% count(Upc) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop)) %>% head()
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
cuantos(train$ScanCount)
dt <- train %>% count(ScanCount) %>%  mutate(prop = round(prop.table(n)*100,4))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
cuantos(train$FinelineNumber)
dt <- train %>% count(FinelineNumber) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
cuantos(train$DepartmentDescription)
dt <- train %>% count(DepartmentDescription) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
cuantos(train$TripType)
dt <- train %>% count(TripType) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
gr <- train %>%
clean_names() %>%
select(trip_type) %>%
purrr::set_names(nm = c('x')) %>%
mutate(id = 1:n()) %>%
group_by(x) %>%
tally() %>%
rename( count = n)
gr%>%
plot_ly(labels = ~x, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = paste("Composición de la variable tripType ,respecto a las canastas (variable upc)"),
showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE)) %>%
layout(legend = list(orientation = 'h'))
cuantos(train$VisitNumber)
dt <- train %>% count(VisitNumber) %>%  mutate(prop = round(prop.table(n)*100,4))%>% arrange(desc(prop)) %>% head()
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
gr <- train %>%
select(TripType, VisitNumber) %>%
unique() %>%
select(TripType) %>%
purrr::set_names(nm = c('x')) %>%
mutate(id = 1:n()) %>%
group_by(x) %>%
tally() %>%
rename( count = n)
gr%>%
plot_ly(labels = ~x, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = paste("Composición de la variable tripType ,respecto a las canastas (variable visitNumber)"),
showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE)) %>%
layout(legend = list(orientation = 'h'))
cuantos(train$Weekday)
dt <- train %>%select(VisitNumber, Weekday) %>% unique %>%  count(Weekday) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
ggplotly(  train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ungroup %>%
group_by(x) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup %>%
ggplot(aes(x = x, y = porc))+
geom_col(aes(fill = y), width = 0.7)+
theme_minimal()+
labs(title = 'Composición de variables categóricas de acuerdo a los productos',
x = 'TripType',
y = 'Porcentaje',
fill = 'Weekday')+
theme(axis.text.x = element_text(angle = 90))) %>%
layout(legend = list(orientation = 'h'))
ggplotly(  train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
group_by(TripType, Weekday) %>%
tally %>%
ungroup %>%
group_by(x) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup %>%
ggplot(aes(x = TripType, y = porc))+
geom_col(aes(fill = WeekDay), width = 0.7)+
theme_minimal()+
labs(title = 'Composición de variables categóricas de acuerdo a los productos',
x = 'TripType',
y = 'Porcentaje',
fill = 'Weekday')+
theme(axis.text.x = element_text(angle = 90))) %>%
layout(legend = list(orientation = 'h'))
ggplotly(  train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
group_by(TripType, Weekday) %>%
tally %>%
ungroup %>%
group_by(TripType) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup %>%
ggplot(aes(x = TripType, y = porc))+
geom_col(aes(fill = WeekDay), width = 0.7)+
theme_minimal()+
labs(title = 'Composición de variables categóricas de acuerdo a los productos',
x = 'TripType',
y = 'Porcentaje',
fill = 'Weekday')+
theme(axis.text.x = element_text(angle = 90))) %>%
layout(legend = list(orientation = 'h'))
train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
group_by(TripType, Weekday) %>%
tally %>%
ungroup %>%
group_by(TripType) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup
train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
group_by(TripType, Weekday) %>%
tally %>%
ungroup %>%
group_by(TripType) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup %>%
ggplot(aes(x = TripType, y = porc))+
geom_col(aes(fill = WeekDay), width = 0.7)+
theme_minimal()+
labs(title = 'Composición de variables categóricas de acuerdo a los productos',
x = 'TripType',
y = 'Porcentaje',
fill = 'Weekday')+
theme(axis.text.x = element_text(angle = 90))
ggplotly(  train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
group_by(TripType, Weekday) %>%
tally %>%
ungroup %>%
group_by(TripType) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup %>%
ggplot(aes(x = TripType, y = porc))+
geom_col(aes(fill = Weekday), width = 0.7)+
theme_minimal()+
labs(title = 'Composición de variables categóricas de acuerdo a los productos',
x = 'TripType',
y = 'Porcentaje',
fill = 'Weekday')+
theme(axis.text.x = element_text(angle = 90))) %>%
layout(legend = list(orientation = 'h'))
ggplotly(  train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ungroup %>%
group_by(x) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup %>%
ggplot(aes(x = x, y = porc))+
geom_col(aes(fill = y), width = 0.7)+
theme_minimal()+
labs(title = 'Composición de variables categóricas de acuerdo a los productos',
x = 'TripType',
y = 'Porcentaje',
fill = 'Weekday')+
theme(axis.text.x = element_text(angle = 90))) %>%
layout(legend = list(orientation = 'h'))
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
paquetes <- c("odbc","readr", "stringr", "dplyr", "tidyverse", "bookdown",
"funModeling","magrittr")
lapply(paquetes, instalar)
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
library(tidyverse)
library(readr)
library(knitr)
library(plotly)
library(feather)
library(kableExtra)
library(janitor)
library(tidygraph)
library(visNetwork)
library(ggraph)
library(purrr)
knitr::opts_chunk$set(echo = TRUE)
train <- read_feather('datos/train.feather')
cuantos <- function(x){
length(unique(x))
}
# Funciones para crear una tabla con distribuciones porcentales de los campos en una columna
distrib <- function(x){
tablita <- table(x)
df <- cbind(tablita,round(prop.table(tablita)*100,4))
colnames(df) <- c('Frecuencia','Porcentaje')
df
}
distrib_val <- function(x,n){
do.call(rbind,lapply(x[n],distrib))
}
summary(train)
cuantos(train$Upc)
dt <- train %>% count(Upc) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop)) %>% head()
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
cuantos(train$ScanCount)
dt <- train %>% count(ScanCount) %>%  mutate(prop = round(prop.table(n)*100,4))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
cuantos(train$FinelineNumber)
dt <- train %>% count(FinelineNumber) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
cuantos(train$DepartmentDescription)
dt <- train %>% count(DepartmentDescription) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
cuantos(train$TripType)
dt <- train %>% count(TripType) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
gr <- train %>%
clean_names() %>%
select(trip_type) %>%
purrr::set_names(nm = c('x')) %>%
mutate(id = 1:n()) %>%
group_by(x) %>%
tally() %>%
rename( count = n)
gr%>%
plot_ly(labels = ~x, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = paste("Composición de la variable tripType ,respecto a las canastas (variable upc)"),
showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE)) %>%
layout(legend = list(orientation = 'h'))
cuantos(train$VisitNumber)
dt <- train %>% count(VisitNumber) %>%  mutate(prop = round(prop.table(n)*100,4))%>% arrange(desc(prop)) %>% head()
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
gr <- train %>%
select(TripType, VisitNumber) %>%
unique() %>%
select(TripType) %>%
purrr::set_names(nm = c('x')) %>%
mutate(id = 1:n()) %>%
group_by(x) %>%
tally() %>%
rename( count = n)
gr%>%
plot_ly(labels = ~x, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = paste("Composición de la variable tripType ,respecto a las canastas (variable visitNumber)"),
showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE)) %>%
layout(legend = list(orientation = 'h'))
cuantos(train$Weekday)
dt <- train %>%select(VisitNumber, Weekday) %>% unique %>%  count(Weekday) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
ggplotly(  train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ungroup %>%
group_by(x) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup %>%
ggplot(aes(x = x, y = porc))+
geom_col(aes(fill = y), width = 0.7)+
theme_minimal()+
labs(title = 'Composición de variables categóricas de acuerdo a los productos',
x = 'TripType',
y = 'Porcentaje',
fill = 'Weekday')+
theme(axis.text.x = element_text(angle = 90))) %>%
layout(legend = list(orientation = 'h'))
ggplotly(  train %>%
select(TripType, Weekday) %>%
filter(TripType %in% 37:40) %>%
mutate(TripType = factor(TripType)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ungroup %>%
group_by(x) %>%
mutate(porc = 100*n/sum(n)) %>%
ungroup %>%
ggplot(aes(x = x, y = porc))+
geom_col(aes(fill = y), width = 0.7)+
theme_minimal()+
labs(title = 'Composición de variables categóricas de acuerdo a los productos',
x = 'TripType',
y = 'Porcentaje',
fill = 'Weekday')+
theme(axis.text.x = element_text(angle = 90))) %>%
layout(legend = list(orientation = 'h'))
