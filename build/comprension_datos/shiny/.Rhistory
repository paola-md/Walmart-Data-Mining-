panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
correlation <- tt %>%
.[,-1]%>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var = 'var1') %>%
gather(var2, val, -var1) %>%
unique %>%
filter(val > .8)
correlation %>%
ggplot( aes(var1, var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
# geom_text(aesX(fill = correlation$val, label = round(correlation$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
correlation %>%
ggplot( aes(var1, var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
# geom_text(aesX(fill = correlation$val, label = round(correlation$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14),
legend.position = 'bottom') +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Medida de Asociación")
df
df %>%
group_by(visita_tipo, producto_departamento) %>%
# summarise(val = sum(producto_cantidad,na.rm =T)) %>%
summarise(val = n_distinct(visita_ticket)) %>%
ungroup
df %>%
group_by(visita_tipo, producto_departamento) %>%
# summarise(val = sum(producto_cantidad,na.rm =T)) %>%
summarise(val = n_distinct(visita_ticket)) %>%
ungroup %>%
group_by(visita_tipo) %>%
mutate(val = val/sum(val)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
spread(producto_departamento,val, fill = 0)
correlation
install.packages("tidygraph","ggraph",
'magrittr','visNetwork')
install.packages('visNetwork')
library("visNetwork", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
library(tidygraph)
library(ggraph)
graph <- as_tbl_graph(coorrelation ) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE))
graph <- as_tbl_graph(correlation ) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE))
graficar_red_nd <- function(dat_g, subtitulo){
ggraph(dat_g, layout = 'linear', circular = TRUE) +
geom_edge_link(aes(edge_width = lift), alpha = .3,
arrow = arrow(length = unit(.4, 'mm')),
color = '#24CBE5') +
geom_node_point(aes(size = centrality), colour = 'salmon') +
geom_node_text(aes(label = nombre), nudge_y = 0.2, size=3, repel = TRUE) +
theme_graph(base_family = 'sans')+
theme(legend.position = 'bottom')+
labs(title = 'Grafo de asociación (Palmolive Ultra)',
subtitle = paste(subtitulo))
}
graficar_red_nd <- function(dat_g, subtitulo){
dat_g %>%
ggraph(layout = 'linear', circular = TRUE) +
geom_edge_link(aes(edge_width = lift), alpha = .3,
arrow = arrow(length = unit(.4, 'mm')),
color = '#24CBE5') +
geom_node_point(aes(size = centrality), colour = 'salmon') +
geom_node_text(aes(label = nombre), nudge_y = 0.2, size=3, repel = TRUE) +
theme_graph(base_family = 'sans')+
theme(legend.position = 'bottom')+
labs(title = 'Grafo de asociación',
subtitle = paste(subtitulo))
}
graficar_red_nd(g_grado, 'Todos los Atributos')
graficar_red_nd(graph, 'Todos los Atributos')
graph
graficar_red_nd(graph, 'Todos los Atributos')
graficar_red_nd <- function(dat_g, subtitulo){
dat_g %>%
ggraph(layout = 'linear', circular = TRUE) +
geom_edge_link(aes(edge_width = val), alpha = .3,
arrow = arrow(length = unit(.4, 'mm')),
color = '#24CBE5') +
geom_node_point(aes(size = centrality), colour = 'salmon') +
geom_node_text(aes(label = nombre), nudge_y = 0.2, size=3, repel = TRUE) +
theme_graph(base_family = 'sans')+
theme(legend.position = 'bottom')+
labs(title = 'Grafo de asociación',
subtitle = paste(subtitulo))
}
graph <- as_tbl_graph(correlation ) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE))
graficar_red_nd(graph, 'Todos los Atributos')
correlation
graph <- as_tbl_graph(correlation ) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE),
nombre = unique(correlation%>%
select(var1) %>%
rbind(correlation%>%
select(var1 = var2)) %>% .$var1))
graficar_red_nd(graph, 'Todos los Atributos')
runApp()
runApp('~/R/mdsc/intro-to-data-science-2019/alumnos/lerojon/Walmart-Data-Mining-/data/shiny.R')
getwd
getwd()
runApp('~/R/mdsc/intro-to-data-science-2019/alumnos/lerojon/Walmart-Data-Mining-/data/shiny.R')
shiny::runApp()
graph
tt <- df %>%
group_by(visita_tipo, producto_departamento) %>%
# summarise(val = sum(producto_cantidad,na.rm =T)) %>%
summarise(val = n_distinct(visita_ticket)) %>%
ungroup %>%
group_by(visita_tipo) %>%
mutate(val = val/sum(val)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
spread(producto_departamento,val, fill = 0)
correlation <- tt %>%
.[,-1]%>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var = 'var1') %>%
gather(var2, val, -var1) %>%
unique %>%
filter(val > .8)
tt <- data %>%
group_by(visita_tipo, producto_departamento) %>%
# summarise(val = sum(producto_cantidad,na.rm =T)) %>%
summarise(val = n_distinct(visita_ticket)) %>%
ungroup %>%
group_by(visita_tipo) %>%
mutate(val = val/sum(val)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
spread(producto_departamento,val, fill = 0)
correlation <- tt %>%
.[,-1]%>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var = 'var1') %>%
gather(var2, val, -var1) %>%
unique %>%
filter(val > .8)
tt
correlation %>%
ggplot( aes(var1, var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
# geom_text(aesX(fill = correlation$val, label = round(correlation$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14),
legend.position = 'bottom') +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Medida de Asociación")
graph <- as_tbl_graph(correlation) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE),
nombre = unique(correlation%>%
select(var1) %>%
rbind(correlation%>%
select(var1 = var2)) %>% .$var1))
graph
graph[1]
graph[[2]]
graph[[1]
graph[[1]]
graph[2
]
graph %>% names
View(graph)
correlation
graph
graph <- as_tbl_graph(correlation %>% filter(val == 1)) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE),
nombre = unique(correlation%>%
select(var1) %>%
rbind(correlation%>%
select(var1 = var2)) %>% .$var1))
graficar_red_nd(graph, 'Todos los Atributos')
graph <- as_tbl_graph(correlation %>% filter(val != 1)) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE),
nombre = unique(correlation%>%
select(var1) %>%
rbind(correlation%>%
select(var1 = var2)) %>% .$var1))
graficar_red_nd(graph, 'Todos los Atributos')
correlation %>% filter(val != 1)
graph <- as_tbl_graph(correlation) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE),
nombre = unique(correlation%>%
select(var1) %>%
rbind(correlation%>%
select(var1 = var2)) %>% .$var1))
graficar_red_nd(graph, 'Todos los Atributos')
graph
graph %>% names
graph %>% summary
graph %>% attr()
graph %>% attr(.)
graph[1]
graph[2]
graph[[2]]
graph['edge']
correlacion
correlation
correlation %>% filter(val != 1)
correlation %>% filter(val != 1) %>% spread(var2, val, fill = NA)
x <- correlation %>%
filter(val != 1, var2 == 'mens_wear')
x%>%
spread(var2, val, fill = NA)
x%>%
spread(var2, val, fill = NA)
x <- correlation %>%
filter(val != 1, var2 == 'boys_wear')
x%>%
spread(var2, val, fill = NA)
correlation
correlation %>%
filter(val != 1) %>%
write.csv('clusters.csv')
read.csv('clusters.csv')
read.csv('clusters.csv') %>% names
read.csv('clusters.csv') %>%
select(var1, cluster) %>%
unique
read.csv('clusters.csv') %>%
select(var1, cluster) %>%
unique %>%
left_join(read_rds('www/walmart_train.RDS'))
read_rds('www/walmart_train.RDS') %>% names
read.csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique %>%
left_join(read_rds('www/walmart_train.RDS') %>% select(producto_departamento) %>% mutate(ind = 1))
tt <- read_rds('www/walmart_train.RDS') %>%
select(producto_departamento) %>%
mutate(ind = 1) %>%
left_join(read.csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique)
tt
tt <- read_rds('www/walmart_train.RDS') %>%
select(producto_departamento) %>%
mutate(ind = 1) %>%
left_join(read.csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique) %>%
left_join(read.csv('clusters.csv') %>%
select(producto_departamento = var2, cluster) %>%
unique)
tt
read.csv('clusters.csv') %>%
select(producto_departamento = var2, cluster) %>%
unique
read.csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique
read_rds('www/walmart_train.RDS') %>%
select(producto_departamento) %>%
mutate(ind = 1) %>%
left_join(read.csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique) %>%
left_join(read.csv('clusters.csv') %>%
select(producto_departamento = var2, cluster) %>%
unique)
tt <- read_rds('www/walmart_train.RDS') %>%
select(producto_departamento) %>%
unique %>%
mutate(ind = 1) %>%
left_join(read.csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique) %>%
left_join(read.csv('clusters.csv') %>%
select(producto_departamento = var2, cluster) %>%
unique)
tt
tt <- read_rds('www/walmart_train.RDS') %>%
select(producto_departamento) %>%
unique %>%
mutate(ind = 1) %>%
left_join(read.csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique)
tt
tt <- read_rds('www/walmart_train.RDS') %>%
select(producto_departamento) %>%
unique %>%
mutate(ind = 1) %>%
left_join(read.csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique %>%
rbind(read.csv('clusters.csv') %>%
select(producto_departamento = var2, cluster) %>%
unique))
tt
read.csv('clusters.csv') %>%
select(producto_departamento = var2, cluster) %>%
unique
read.csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique %>%
rbind(read.csv('clusters.csv') %>%
select(producto_departamento = var2, cluster) %>%
unique)
%>%
rbind(read.csv('clusters.csv') %>%
select(producto_departamento = var2, cluster) %>%
unique)
ttt <- read.csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique
ttt %>% View
tttt <- read.csv('clusters.csv') %>%
select(producto_departamento = var2, cluster) %>%
unique
ttt %>% View
tttt %>% View
tt <- read_rds('www/walmart_train.RDS') %>%
select(producto_departamento) %>%
unique %>%
mutate(ind = 1) %>%
left_join(ttt)
tt %>% View
tttt <- read_csv('clusters.csv') %>%
select(producto_departamento = var2, cluster) %>%
unique
ttt <- read_csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique
tt <- read_rds('www/walmart_train.RDS') %>%
select(producto_departamento) %>%
unique %>%
mutate(ind = 1) %>%
left_join(ttt)
tt
tt %>% filter(cluster =='cat9')
read_csv('clusters.csv') %>%
select(producto_departamento = var1, cluster) %>%
unique
ttt %>% filter(cluster =='cat9')
tt <- read_rds('www/walmart_train.RDS') %>%
select(producto_departamento) %>%
unique %>%
mutate(producto_departamento = as.character(producto_departamento)) %>%
mutate(ind = 1) %>%
left_join(ttt)
tt
read_rds('www/walmart_train.RDS') %>%
select(producto_departamento) %>%
unique %>%
mutate(producto_departamento = as.character(producto_departamento)) %>%
left_join(ttt)
ttt
tt <- read_rds('www/walmart_train.RDS') %>%
select(producto_departamento) %>%
unique %>%
mutate(producto_departamento = str_replace_all(as.character(producto_departamento),'(-)|(\\s+)','_')) %>%
left_join(ttt)
tt
tt %>% filter(is.na(cluster))
tt %>% filter(!is.na(cluster)) %>% .$cluster %>% unique
15+19
16:34 %>% length
tt %>% filter(is.na(cluster)) %>%
mutate(cluster = áste0(rep(cat,19),16:34))
tt %>% filter(is.na(cluster)) %>%
mutate(cluster = paste0(rep(cat,19),16:34))
paste0(rep('cat',19),16:34)
tt %>% filter(is.na(cluster)) %>%
mutate(cluster = paste0(rep('cat',19),16:34))
recat <- tt %>%
filter(!is.na(cluster)) %>%
rbind(tt %>%
filter(is.na(cluster)) %>%
mutate(cluster = paste0(rep('cat',19),16:34)))
tt <- read_rds('www/walmart_train.RDS') %>%
mutate(producto_departamento = str_replace_all(as.character(producto_departamento),'(-)|(\\s+)','_')) %>%
left_join(recat) %>%
rename(producto_departamento2 = cluster)
tt %>% select(producto_departamento2)
tt %>% select(producto_departamento2) %>% .$producto_departamento2 %>% is.na() %>% sum
tt %>% save_RDS('www/walmart_train_recat.RDS')
tt %>% saveRDS('www/walmart_train_recat.RDS')
runApp()
readRDS('www/walmart_train.RDS') %>% names
library(readr)
library(shiny)
library(shinydashboard)
library(shinycssloaders)
library(shinyWidgets)
library(shinyBS)
library(RPostgres)
library(data.table)
library(tidyr)
library(dplyr)
library(stringr)
library(reshape2)
library(plotly)
library(DT)
library(lubridate)
library(magrittr)
library(ggplot2)
library(rlang)
library(hdrcde)
library(GGally)
library(tibble)
library(tidygraph)
library(visNetwork)
library(ggraph)
library(scales)
readRDS('www/walmart_train.RDS') %>% names
readRDS('www/walmart_train.RDS') %>% select(visita_tipo, visita_ticket) %>% unique %>% nrow
readRDS('www/walmart_train.RDS') %>% select( visita_ticket) %>% unique %>% nrow
library(readr)
library(shiny)
library(shinydashboard)
library(shinycssloaders)
library(shinyWidgets)
library(shinyBS)
library(RPostgres)
library(data.table)
library(tidyr)
library(dplyr)
library(stringr)
library(reshape2)
library(plotly)
library(DT)
library(lubridate)
library(magrittr)
library(ggplot2)
library(rlang)
library(hdrcde)
library(GGally)
library(tibble)
library(tidygraph)
library(visNetwork)
library(ggraph)
library(scales)
shiny::runApp()
shiny::runApp()
