shiny::runApp()
runApp()
runApp()
df <- readRDS('www/walmart_train.RDS')
#Valores faltantes
apply(is.na(df),2,sum)
#Valores Ãºnicos por columna
apply(df,2,function(x){length(unique(x))})
df
df$producto_cantidad %>% unique()
#mas de la mitad de los faltantes son productos del departamento de pharma
apply(is.na(df %>% filter(producto_departamento =='pharmacy rx')),2,sum)
#zoom departamento pharma
apply(df %>% filter(!is.na(producto_identificador),
producto_departamento =='pharmacy rx'),2,
function(x){length(unique(x))})
df %>%
filter(!is.na(producto_identificador),producto_departamento=='pharmacy rx') %>%
ggplot(aes(x= producto_identificador))+
geom_histogram(stat = 'count')
df <- readRDS('www/walmart_train.RDS')
df
df %>%
group_by(visita, producto_departamento) %>%
summarise(val = sum(producto_cantidad,na.rm =T)) %>%
ungroup
df %>%
group_by(visita_tipo, producto_departamento) %>%
summarise(val = sum(producto_cantidad,na.rm =T)) %>%
ungroup
df %>%
group_by(visita_tipo, producto_departamento) %>%
summarise(val = sum(producto_cantidad,na.rm =T)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'\\s+','_')) %>%
spread(producto_departamento,val)
df %>%
group_by(visita_tipo, producto_departamento) %>%
summarise(val = sum(producto_cantidad,na.rm =T)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
spread(producto_departamento,val)
df %>%
group_by(visita_tipo, producto_departamento) %>%
summarise(val = sum(producto_cantidad,na.rm =T)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
spread(producto_departamento,val, fill = 0)
tt %>%
.[,-1]
tt <- df %>%
group_by(visita_tipo, producto_departamento) %>%
summarise(val = sum(producto_cantidad,na.rm =T)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
spread(producto_departamento,val, fill = 0)
tt %>%
.[,-1]
df
tt <- df %>%
group_by(visita_tipo, producto_departamento) %>%
# summarise(val = sum(producto_cantidad,na.rm =T)) %>%
summarise(val = n_distinct(visita_ticker)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
spread(producto_departamento,val, fill = 0)
tt <- df %>%
group_by(visita_tipo, producto_departamento) %>%
# summarise(val = sum(producto_cantidad,na.rm =T)) %>%
summarise(val = n_distinct(visita_ticket)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
spread(producto_departamento,val, fill = 0)
tt
tt %>%
ggplot( aes(visita_tipo, producto_departamento)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
geom_text(aes(fill = tt$val, label = round(tt$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
library(ggplot2)
library(scales)
tt %>%
ggplot( aes(visita_tipo, producto_departamento)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
geom_text(aes(fill = tt$val, label = round(tt$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
tt <- df %>%
group_by(visita_tipo, producto_departamento) %>%
# summarise(val = sum(producto_cantidad,na.rm =T)) %>%
summarise(val = n_distinct(visita_ticket)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
# spread(producto_departamento,val, fill = 0)
identity
tt %>%
ggplot( aes(visita_tipo, producto_departamento)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
geom_text(aes(fill = tt$val, label = round(tt$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
tt <- df %>%
group_by(visita_tipo, producto_departamento) %>%
# summarise(val = sum(producto_cantidad,na.rm =T)) %>%
summarise(val = n_distinct(visita_ticket)) %>%
ungroup %>%
group_by(visita_tipo) %>%
mutate(val = val/sum(val)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
# spread(producto_departamento,val, fill = 0)
identity
tt %>%
ggplot( aes(visita_tipo, producto_departamento)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
geom_text(aes(fill = tt$val, label = round(tt$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
scale(mtcars)
mtcars
tt
df
View(df)
library(GoodmanKruskal)
install.packages('GoodmanKruskal')
library(GoodmanKruskal)
GKmatrix1<- GKtauDataframe(df %>% select(visita_tipo, producto_departamento))
mushroomFrame1<- subset(df, select = c('visita_tipo', 'producto_departamento'))
GKmatrix1<- GKtauDataframe(mushroomFrame1)
mushroomFrame1<- subset(df, select = c('visita_tipo', 'producto_departamento'))
GKmatrix1<- GKtauDataframe(mushroomFrame1)
tt <- df %>%
group_by(visita_tipo, producto_departamento) %>%
# summarise(val = sum(producto_cantidad,na.rm =T)) %>%
summarise(val = n_distinct(visita_ticket)) %>%
ungroup %>%
group_by(visita_tipo) %>%
mutate(val = val/sum(val)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
spread(producto_departamento,val, fill = 0)
tt
tt %>%
.[,-1]
tt %>%
.[,-1]%>%
cor()
70*70
library(tibble)
correlation <- tt %>%
.[,-1]%>%
cor() %>%
rownames_to_column(var1) %>%
gather(var2, val, .var1)
correlation <- tt %>%
.[,-1]%>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var1) %>%
gather(var2, val, .var1)
correlation <- tt %>%
.[,-1]%>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var = var1) %>%
gather(var2, val, .var1)
correlation <- tt %>%
.[,-1]%>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var = 'var1') %>%
gather(var2, val, .var1)
correlation <- tt %>%
.[,-1]%>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var = 'var1') %>%
gather(var2, val, var1)
correlation <- tt %>%
.[,-1]%>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var = 'var1') %>%
gather(var2, val, -var1)
correlation <- tt %>%
.[,-1]%>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var = 'var1') %>%
gather(var2, val, -var1) %>%
unique
correlation
tt %>%
ggplot( aes(var1, var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
geom_text(aes(fill = tt$val, label = round(tt$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
correlation %>%
ggplot( aes(var1, var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
geom_text(aes(fill = tt$val, label = round(tt$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
correlation
correlation %>% head
correlation %>%
ggplot( aes(var1, var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
geom_text(aes(fill = correlation$val, label = round(correlation$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
correlation %>%
ggplot( aes(var1, var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
# geom_text(aesX(fill = correlation$val, label = round(correlation$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
correlation <- tt %>%
.[,-1]%>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var = 'var1') %>%
gather(var2, val, -var1) %>%
unique %>%
filter(val > .6)
correlation %>%
ggplot( aes(var1, var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
# geom_text(aesX(fill = correlation$val, label = round(correlation$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
correlation <- tt %>%
.[,-1]%>%
cor() %>%
as.data.frame() %>%
rownames_to_column(var = 'var1') %>%
gather(var2, val, -var1) %>%
unique %>%
filter(val > .8)
correlation %>%
ggplot( aes(var1, var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
# geom_text(aesX(fill = correlation$val, label = round(correlation$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14)) +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Corr. Coef.")
correlation %>%
ggplot( aes(var1, var2)) + # x and y axes => Var1 and Var2
geom_tile(aes(fill = val)) + # background colours are mapped according to the value column
# geom_text(aesX(fill = correlation$val, label = round(correlation$val, 2))) + # write the values
scale_fill_gradient2(low = muted("darkred"),
mid = "white",
high = muted("midnightblue"),
midpoint = 0) + # determine the colour
theme(panel.grid.major.x=element_blank(), #no gridlines
panel.grid.minor.x=element_blank(),
panel.grid.major.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.background=element_rect(fill="white"), # background=white
axis.text.x = element_text(angle=90, hjust = 1,vjust=1,size = 12,face = "bold"),
plot.title = element_text(size=20,face="bold"),
axis.text.y = element_text(size = 12,face = "bold")) +
ggtitle("Mapa de Calor") +
theme(legend.title=element_text(face="bold", size=14),
legend.position = 'bottom') +
scale_x_discrete(name="") +
scale_y_discrete(name="") +
labs(fill="Medida de AsociaciÃ³n")
df
df %>%
group_by(visita_tipo, producto_departamento) %>%
# summarise(val = sum(producto_cantidad,na.rm =T)) %>%
summarise(val = n_distinct(visita_ticket)) %>%
ungroup
df %>%
group_by(visita_tipo, producto_departamento) %>%
# summarise(val = sum(producto_cantidad,na.rm =T)) %>%
summarise(val = n_distinct(visita_ticket)) %>%
ungroup %>%
group_by(visita_tipo) %>%
mutate(val = val/sum(val)) %>%
ungroup %>%
mutate(producto_departamento = str_replace_all(producto_departamento,'(\\s+)|(-)','_')) %>%
spread(producto_departamento,val, fill = 0)
correlation
install.packages("tidygraph","ggraph",
'magrittr','visNetwork')
install.packages('visNetwork')
library("visNetwork", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
library(tidygraph)
library(ggraph)
graph <- as_tbl_graph(coorrelation ) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE))
graph <- as_tbl_graph(correlation ) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE))
graficar_red_nd <- function(dat_g, subtitulo){
ggraph(dat_g, layout = 'linear', circular = TRUE) +
geom_edge_link(aes(edge_width = lift), alpha = .3,
arrow = arrow(length = unit(.4, 'mm')),
color = '#24CBE5') +
geom_node_point(aes(size = centrality), colour = 'salmon') +
geom_node_text(aes(label = nombre), nudge_y = 0.2, size=3, repel = TRUE) +
theme_graph(base_family = 'sans')+
theme(legend.position = 'bottom')+
labs(title = 'Grafo de asociaciÃ³n (Palmolive Ultra)',
subtitle = paste(subtitulo))
}
graficar_red_nd <- function(dat_g, subtitulo){
dat_g %>%
ggraph(layout = 'linear', circular = TRUE) +
geom_edge_link(aes(edge_width = lift), alpha = .3,
arrow = arrow(length = unit(.4, 'mm')),
color = '#24CBE5') +
geom_node_point(aes(size = centrality), colour = 'salmon') +
geom_node_text(aes(label = nombre), nudge_y = 0.2, size=3, repel = TRUE) +
theme_graph(base_family = 'sans')+
theme(legend.position = 'bottom')+
labs(title = 'Grafo de asociaciÃ³n',
subtitle = paste(subtitulo))
}
graficar_red_nd(g_grado, 'Todos los Atributos')
graficar_red_nd(graph, 'Todos los Atributos')
graph
graficar_red_nd(graph, 'Todos los Atributos')
graficar_red_nd <- function(dat_g, subtitulo){
dat_g %>%
ggraph(layout = 'linear', circular = TRUE) +
geom_edge_link(aes(edge_width = val), alpha = .3,
arrow = arrow(length = unit(.4, 'mm')),
color = '#24CBE5') +
geom_node_point(aes(size = centrality), colour = 'salmon') +
geom_node_text(aes(label = nombre), nudge_y = 0.2, size=3, repel = TRUE) +
theme_graph(base_family = 'sans')+
theme(legend.position = 'bottom')+
labs(title = 'Grafo de asociaciÃ³n',
subtitle = paste(subtitulo))
}
graph <- as_tbl_graph(correlation ) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE))
graficar_red_nd(graph, 'Todos los Atributos')
correlation
graph <- as_tbl_graph(correlation ) %>%
mutate(importancia = centrality_degree(mode = "all")) %>%
activate(nodes) %>%
mutate(centrality = centrality_betweenness(directed = FALSE),
nombre = unique(correlation%>%
select(var1) %>%
rbind(correlation%>%
select(var1 = var2)) %>% .$var1))
graficar_red_nd(graph, 'Todos los Atributos')
runApp()
runApp('~/R/mdsc/intro-to-data-science-2019/alumnos/lerojon/Walmart-Data-Mining-/data/shiny.R')
getwd
getwd()
runApp('~/R/mdsc/intro-to-data-science-2019/alumnos/lerojon/Walmart-Data-Mining-/data/shiny.R')
