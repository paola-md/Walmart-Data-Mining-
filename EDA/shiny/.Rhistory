lapply(paquetes, instalar)
library(shiny)
library(shinydashboard)
library(shinycssloaders)
library(shinyWidgets)
library(shinyBS)
library(RPostgres)
library(data.table)
library(tidyr)
library(dplyr)
library(stringr)
library(reshape2)
library(plotly)
library(DT)
library(lubridate)
library(magrittr)
library(ggplot2)
library(dplyr)
library(vcd)
ucb <- data.frame(UCBAdmissions)
class(ucb)
str(ucb)
glimpse(ucb)
summary(ucb)
ucb <- within(ucb, Accept <-
factor(Admit, levels=c("Rejected", "Admitted")))
doubledecker(xtabs(Freq~ Dept + Gender + Accept, data = ucb),
gp = gpar(fill = c("grey90", "steelblue")))
install.packages("vcd")
doubledecker(xtabs(Freq~ Dept + Gender + Accept, data = ucb),
gp = gpar(fill = c("grey90", "steelblue")))
library(tidyverse)
doubledecker(xtabs(Freq~ Dept + Gender + Accept, data = ucb),
gp = gpar(fill = c("grey90", "steelblue")))
library(vcd)
doubledecker(xtabs(Freq~ Dept + Gender + Accept, data = ucb),
gp = gpar(fill = c("grey90", "steelblue")))
glimpse(MASS::Boston)
with(MASS::Boston, table(medv))
with(MASS::Boston, hist(medv))
ggplot(MASS::Boston, aes(medv)) +
geom_histogram() +
ylab("") + xlab("Valor medio de las casas (1000s USD)")
ggplot(MASS::Boston, aes(medv)) +
geom_histogram(binwidth=1) +
ylab("") + xlab("Valor medio de las casas (1000s USD)")
B2 <- gather(MASS::Boston, BosVars, BosValues, crim:medv)
ggplot(B2, aes(BosValues)) +
geom_histogram() + xlab("") + ylab("") +
facet_wrap(~ BosVars , scales = "free")
with(MASS::Boston, hist(ptratio, freq = FALSE))
with(MASS::Boston, MASS::truehist(ptratio))
ggplot(MASS::Boston, aes(y=medv)) +
geom_boxplot()
with(MASS::Boston, stripchart(medv))
with(MASS::Boston, plot(density(medv)))
with(MASS::Boston, rug(medv))
with(MASS::Boston, plot(density(medv)))
library(ggplot2)
#MENUS UI
read_rds('www/autoimport_clean.RDS')
#MENUS UI
categoricas <- read_rds('www/autoimport_clean.RDS') %>%
select_if(is.factor()) %>%
names
#MENUS UI
categoricas <- read_rds('www/autoimport_clean.RDS') %>%
select_if(is.factor(.)) %>%
names
#MENUS UI
categoricas <- read_rds('www/autoimport_clean.RDS') %>%
select_if(function(x) is.factor(x)) %>%
names
numericas <- categoricas <- read_rds('www/autoimport_clean.RDS') %>%
select_if(function(x) is.numeric(x)) %>%
names
numericas
numericas <- categoricas <- read_rds('www/autoimport_clean.RDS') %>%
select_if(function(x) is.numeric(x)) %>%
names %>%
.[-1]
numericas
library(ggplot2)
library(dplyr)
library(VGAMdata)
data(oly12, package="VGAMdata")
install.packages("VGAMdata")
data(oly12, package="VGAMdata")
class(oly12)
str(oly12)
glimpse(oly12)
summary(oly12)
ggplot(oly12, aes(Height, Weight)) + geom_point() +
ggtitle("Athletes at the London Olympics 2012")
library(HistData)
data(DrinksWages, package="HistData")
class(DrinksWages)
str(DrinksWages)
glimpse(DrinksWages)
summary(DrinksWages)
ggplot(DrinksWages, aes(drinks/n, wage)) + geom_point() +
xlab("Proportion of drinkers") + xlim(0,1) + ylim(0,40)
install.packages("HistData")
library(HistData)
data(DrinksWages, package="HistData")
class(DrinksWages)
str(DrinksWages)
glimpse(DrinksWages)
summary(DrinksWages)
ggplot(DrinksWages, aes(drinks/n, wage)) + geom_point() +
xlab("Proportion of drinkers") + xlim(0,1) + ylim(0,40)
with(DrinksWages, hist(n, breaks=0:max(n)))
with(DrinksWages, table(n))
with(DrinksWages, max(n[drinks==0]))
with(DrinksWages, trade[drinks==0 & n==max(n[drinks==0])])
with(DrinksWages, max(n[sober==0]))
with(DrinksWages, trade[sober==0 & n==max(n[sober==0])])
bigDW <- filter(DrinksWages, n > 4)
ggplot(bigDW, aes(drinks/n, wage)) + geom_point() +
xlab("Proportion of drinkers") + xlim(0,1) + ylim(0,40)
data(geyser, package="MASS")
class(geyser)
str(geyser)
glimpse(geyser)
summary(geyser)
ggplot(geyser, aes(duration, waiting)) + geom_point()
ggplot(geyser, aes(duration, waiting)) + geom_point() +
geom_density2d()
library(hdrcde)
par(mfrow=c(1,1))
par(mar=c(3.1, 4.1, 1.1, 2.1))
with(geyser, hdr.boxplot.2d(duration, waiting,
show.points=TRUE, prob=c(0.01,0.05,0.5,0.75)))
install.packages("hdrcde")
library(hdrcde)
par(mfrow=c(1,1))
par(mar=c(3.1, 4.1, 1.1, 2.1))
with(geyser, hdr.boxplot.2d(duration, waiting,
show.points=TRUE, prob=c(0.01,0.05,0.5,0.75)))
with(geyser, hdr.boxplot.2d(duration, waiting,
show.points=TRUE, prob=c(0.01)))
data(Cars93, package="MASS")
class(Cars93)
str(Cars93)
glimpse(Cars93)
summary(Cars93)
ggplot(Cars93, aes(Weight, MPG.city)) + geom_point() +
geom_smooth(colour="green") + ylim(0,50)
data(father.son, package="UsingR")
class(father.son)
str(father.son)
glimpse(father.son)
summary(father.son)
install.packages("UsingR")
class(father.son)
str(father.son)
glimpse(father.son)
summary(father.son)
ggplot(father.son, aes(fheight, sheight)) + geom_point() +
geom_smooth(method="lm", colour="red") +
geom_abline(slope=1, intercept=0)
data(father.son, package="UsingR")
class(father.son)
str(father.son)
glimpse(father.son)
summary(father.son)
ggplot(father.son, aes(fheight, sheight)) + geom_point() +
geom_smooth(method="lm", colour="red") +
geom_abline(slope=1, intercept=0)
data(father.son, package="UsingR")
m1 <- lm(sheight~fheight, father.son)
summary(m1)
par(mfrow=c(2,2))
plot(m1)
data(father.son, package="UsingR")
ggplot(father.son, aes(fheight, sheight)) + geom_point() +
geom_smooth(method="lm", colour="red", se=FALSE) +
geom_smooth()
library("ggplot2movies")
install.packages("ggplot2movies")
library("ggplot2movies")
class(movies)
str(movies)
glimpse(movies)
summary(movies)
ggplot(movies, aes(votes, rating)) + geom_point() + ylim(1,10)
ggplot(oly12, aes(Height, Weight)) +
geom_point(size = 1) + facet_wrap(~Sex, ncol=1)
mixtas <- read_rds('www/autoimport_clean.RDS') %>%
# select_if(function(x) is.numeric(x)) %>%
names %>%
.[-1]
mixtas
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data
req(input$kpiTablecat)
req(input$kpiTScat)
gr <- data %>%
select(contains(input$kpiTScat)) %>%
purrr::set_names(nm = c('x'))
gr
gr %>%
group_by(x) %>%
summarize(count = n()) %>%
plot_ly(labels = ~manuf, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
gr %>%
group_by(x) %>%
summarize(count = n()) %>%
plot_ly(labels = ~x, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
gr %>%
group_by(x) %>%
summarize(count = n()) %>%
plot_ly(labels = ~x, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = paste("Composición de la variable:",
input$kpiTScat),
showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
runApp()
rm(list = ls())
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
paquetes <- c('lubridate', 'magrittr', 'ggvis', 'dplyr', 'tidyr', 'readr', 'rvest',
'ggplot2', 'stringr', 'ggthemes', 'googleVis', 'shiny', 'tibble', 'vcd', 'vcdExtra',
'GGally', 'readODS', 'readxl', "RSQLite", "gridExtra", "GDAdata", "UsingR", "MASS", "ash",
"ggplot2movies", "effects", "likert", "waffle", "extrafont", "funModeling", "emojifont")
lapply(paquetes, instalar)
runApp()
runApp()
runApp()
req(input$kpiTScat)
data %>% select(contains(input$kpiTScat)) %>% purrr::set_names(nm = c("x"))
input$kpiTScat
data %>% select(contains(input$kpiTScat))
x <- input$kpiTScat
data %>%
select(contains(x))
data
data %>%
select(contains(x))
library(shiny)
library(shinydashboard)
library(shinycssloaders)
library(shinyWidgets)
library(shinyBS)
library(RPostgres)
library(data.table)
library(tidyr)
library(dplyr)
library(stringr)
library(reshape2)
library(plotly)
library(DT)
library(lubridate)
library(magrittr)
library(ggplot2)
data %>%
select(contains(x))
contains
data %>%
select_if(names(.)==x)
req(input$kpiTSnum)
x <- input$kpiTSnum
vect <- data %>%
select_if(names(.)==x) %>%
purrr::set_names(nm = c('x'))
with(vect, plot(density(x)))
dev.off()
with(vect, plot(density(x)))
plot(ash1(bin1(Boston$medv, nbin=50)), type="l")
plot(d1, ylim=c(0,0.08))
d1 <- density(Boston$medv)
plot(d1, ylim=c(0,0.08))
lines(density(Boston$medv, d1$bw/2), col="green")
lines(density(Boston$medv, d1$bw/5), col="blue")
rug(Boston$medv)
runApp()
runApp()
runApp()
req(input$kpiTScat)
x <- input$kpiTScat
gr <- data %>% select_if(names(.) == x) %>% purrr::set_names(nm = c("x")) %>%
group_by(x) %>% summarize(count = n())
data %>%
select_if(names(.)==x) %>%
purrr::set_names(nm = c('x')) %>%
group_by(x)
data %>%
select_if(names(.)==x) %>%
purrr::set_names(nm = c('x')) %>%
group_by(x) %>%
summarize(count = n())
gr <- data %>%
select_if(names(.)==x) %>%
purrr::set_names(nm = c('x')) %>%
mutate(id = 1:n()) %>%
group_by(x) %>%
summarize(count = n())
gr <- data %>%
select_if(names(.)==x) %>%
purrr::set_names(nm = c('x')) %>%
mutate(id = 1:n()) %>%
group_by(x) %>%
tally() %>%
rename( count = n)
gr%>%
plot_ly(labels = ~x, values = ~count) %>%
add_pie(hole = 0.6) %>%
layout(title = paste("Composición de la variable:",
input$kpiTScat),
showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
runApp()
runApp()
runApp()
req(input$kpiTSnum)
x <- input$kpiTSnum
vect <- data %>%
select_if(names(.)==x) %>%
purrr::set_names(nm = c('x'))
vect
dev.off()
with(vect, plot(density(x)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
req(input$kpiTSmix1)
req(input$kpiTSmix2)
runApp()
runApp()
categorica <- input$kpiTSmix1
numerica <- input$kpiTSmix2
plot_ly(data = data, y = numerica, color = categorica, type = "box")
plot_ly(data = data, y = eval(parse_expr(numerica)),
color = eval(parse_expr(categorica)),
type = "box")
library(rlang)
plot_ly(data = data, y = eval(parse_expr(numerica)),
color = eval(parse_expr(categorica)),
type = "box")
data
plot_ly(data = data, y = ~eval(parse_expr(numerica)),
color = ~eval(parse_expr(categorica)),
type = "box")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
req(input$kpiTScat1)
req(input$kpiTScat2)
data %>%
select_if(names(.)%in% c(x,y))
x <- input$kpiTScat1
y <- input$kpiTScat1
data %>%
select_if(names(.)%in% c(x,y))
y <- input$kpiTScat2
data %>%
select_if(names(.)%in% c(x,y))
data %>%
select_if(names(.)%in% c(x,y)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally
ggplot(aes(x = x, y = n))+
geom_col(aes(fill = y), width = 0.7)
data %>%
select_if(names(.)%in% c(x,y)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ggplot(aes(x = x, y = n))+
geom_col(aes(fill = y), width = 0.7)
data %>%
select_if(names(.)%in% c(x,y)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ggplot(aes(x = x, y = n))+
geom_col(aes(fill = y), width = 0.7)
data %>%
select_if(names(.)%in% c(x,y)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ggplot(aes(x = x, y = n))+
geom_col(aes(fill = y), width = 0.7)
data %>%
select_if(names(.)%in% c(x,y)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally
data %>%
select_if(names(.)%in% c(x,y)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ggplot(aes(x = x, y = n))+
geom_hist(stat = 'identity')
data %>%
select_if(names(.)%in% c(x,y)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ggplot(aes(x = x, y = n))+
geom_bar(stat = 'identity')
data %>%
select_if(names(.)%in% c(x,y)) %>%
set_names(nm = c('x','y')) %>%
group_by(x,y) %>%
tally %>%
ggplot(aes(x = x, y = n))+
geom_col(aes(fill = y), width = 0.7)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
with(geyser, hdr.boxplot.2d(duration, waiting,
show.points=TRUE, prob=c(0.01,0.05,0.5,0.75)))
with(geyser, hdr.boxplot.2d(duration, waiting,
show.points=TRUE, prob=c(0.01,0.05,0.5,0.75)))
# data %>%
#   select_if(names(.)%in% c(x,y)) %>%
#   set_names(nm = c('x','y')) %>%
#
vect <- data %>%
select_if(names(.)%in% c(x,y)) %>%
set_names(nm = c('x','y'))
with(vect, hdr.boxplot.2d(x, y,
show.points=TRUE, prob=c(0.01,0.05,0.5,0.75)))
runApp()
runApp()
runApp()
req(input$kpiTSmixa1)
req(input$kpiTSmixa2)
req(input$kpiTSmixa4)
req(input$kpiTSmixa4)
req(input$kpiTSmixa3)
req(input$kpiTSmixa4)
library(GGally)
data %>%
select_if(names(.)%in% c(input$kpiTSmixa1,
input$kpiTSmixa2,
input$kpiTSmixa3,
input$kpiTSmixa4))
graf <- data %>%
select_if(names(.)%in% c(input$kpiTSmixa1,
input$kpiTSmixa2,
input$kpiTSmixa3,
input$kpiTSmixa4))
ggpairs(graf)+
theme_minimal()+
theme(legend.position = 'none',
legend.title = element_text(fct),
axis.text.x = element_text(angle = 45, hjust = 1))+
labs(title = 'EDA',
subtitle=paste0('Variables continuas'))
ggpairs(graf)+
theme_minimal()+
labs(title ='SPLOM')
runApp()
runApp()
runApp()
runApp()
data
data %>% select_if(names(.)%in% numericas)
data %>% select_if(names(.)%in% numericas) %>% ggpairs
data %>% select_if(names(.)%in% c(categoricas,'price')) %>% ggpairs
data %>% select_if(names(.)%in% c(categoricas,'price'))
data %>% select_if(names(.)%in% c(categoricas,'price')) %>% ggpairs
graf <- data %>% select(gruos, mty_mpg, engine_size,price)
ggpairs(graf)+
theme_minimal()+
labs(title ='SPLOM')+
theme(legend.position = 'none',
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 45, hjust = 1))
graf <- data %>% select(grupos, mty_mpg, engine_size,price)
