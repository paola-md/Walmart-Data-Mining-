library(readr)
Base271 <- read_csv("/media/Box/Modelos_Lineales_Generalizados/Projecto/data/Base271.csv",
col_types = cols(ciclo_estacion_retiro = col_character(),
hora_retiro = col_time(format = "%H:%M")))
View(Base271)
library(tidyverse)
library(readr)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
Base271 <- read_csv("/media/Box/Modelos_Lineales_Generalizados/Projecto/data/Base271.csv", col_types = cols(ciclo_estacion_retiro = col_character(), hora_retiro = col_time(format = "%H:%M")))
cuantos <- function(x){
length(unique(x))
}
# Funciones para crear una tabla con distribuciones porcentales de los campos en una columna
distrib <- function(x){
tablita <- table(x)
df <- cbind(tablita,round(prop.table(tablita)*100,4))
colnames(df) <- c('Frecuencia','Porcentaje')
df
}
distrib_val <- function(x,n){
do.call(rbind,lapply(x[n],distrib))
}
View(Base271)
Base271 <- read_csv("/media/Box/Modelos_Lineales_Generalizados/Projecto/data/Base271.csv", col_types = cols(ciclo_estacion_retiro = col_character()))
library(tidyverse)
library(readr)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
Ecobicis_Final <- read_csv("/media/Box/Modelos_Lineales_Generalizados/Projecto/data/Ecobicis_Final.csv")
cuantos <- function(x){
length(unique(x))
}
# Funciones para crear una tabla con distribuciones porcentales de los campos en una columna
distrib <- function(x){
tablita <- table(x)
df <- cbind(tablita,round(prop.table(tablita)*100,4))
colnames(df) <- c('Frecuencia','Porcentaje')
df
}
distrib_val <- function(x,n){
do.call(rbind,lapply(x[n],distrib))
}
View(Ecobicis_Final)
library(tidyverse)
library(readr)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
Ecobicis_Final <- read_csv("/media/Box/Modelos_Lineales_Generalizados/Projecto/data/Ecobicis_Final.csv")
cuantos <- function(x){
length(unique(x))
}
# Funciones para crear una tabla con distribuciones porcentales de los campos en una columna
distrib <- function(x){
tablita <- table(x)
df <- cbind(tablita,round(prop.table(tablita)*100,4))
colnames(df) <- c('Frecuencia','Porcentaje')
df
}
distrib_val <- function(x,n){
do.call(rbind,lapply(x[n],distrib))
}
dt <- Ecobicis_Final %>% count(Ecobicis_Final$ciclo_estacion_retiro) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
cuantos(Ecobicis_Final$ciclo_estacion_retiro)
dt <- Ecobicis_Final %>% count(ciclo_estacion_retiro) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
dt_estaciones <- kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
ggplot(dt, aes(x=n))+geom_boxplot()
View(dt)
dt <- Ecobicis_Final %>% count(ciclo_estacion_retiro) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
dt_estaciones <- kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
ggplot(dt, aes(x=n))+geom_histogram()
dt <- Ecobicis_Final %>% count(ciclo_estacion_retiro) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
dt_estaciones <- kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
#ggplot(dt, aes(x=n))+geom_histogram()
write.csv(dt_estaciones, "Conteo_viajesOct2019.csv")
dt <- Ecobicis_Final %>% count(ciclo_estacion_retiro) %>%  mutate(prop = round(prop.table(n)*100,2))%>% arrange(desc(prop))
dt_estaciones <- kable(dt) %>%  kable_styling(bootstrap_options = "striped", full_width = F)
#ggplot(dt, aes(x=n))+geom_histogram()
write.csv(dt, "Conteo_viajesOct2019.csv")
#--- Carga de paquetes necesarios ---
#library(R2OpenBUGS)
library(R2jags)
library(tidyverse)
# Para ejectuar este archivo, por favor situarse en la ruta donde esta el archivo csv con los datos
# Cargamos los datos limpios
# Nota: ajustar "/media/Box/Modelos_Lineales_Generalizados/Projecto/data/Base/Ecobicis_Final.csv"
# a la ruta apropiada
###### ----- Se convierten a variables caracteres las variables categoricas ----- ######
Base271 <- read_csv("/media/Box/Modelos_Lineales_Generalizados/Projecto/data/Base271.csv",
col_types = cols(bici = col_skip(), ciclo_estacion_retiro = col_skip(),
dia_sem = col_character(), dif_dias = col_skip(),
districtcode_retiro = col_skip(),
estacion_arribo_modificado = col_character(),
fecha_arribo = col_skip(), fecha_retiro = col_skip(),
genero_usuario = col_character(),
hora_arribo = col_skip(), hora_retiro = col_skip(),
nearbystation0 = col_skip(), nearbystation1 = col_skip(),
tipo_estacion_retiro = col_skip()))
Base271$edad_usuario <- as.character(Base271$edad_usuario)
df <- Base271
# Definimos un umbral
time_threshold = 10 # 10 minutos
Base271$tiempo_umbral <- if_else(Base271$tiempo_min>time_threshold, 1, 0)
###### ----- Parametros de la simulacion ----- ######
# Numero de renglones
N <- nrow(df)
# Parametros de la simulacion
s= 10000 # numero de puntos a obtenerse en la cadena
umbral_calentamiento = 0.1 # % puntos a quemar en periodo de calentamiento
s_cal = s*umbral_calentamiento # numero de puntos a quemar en periodo de calentamiento
#-Definicion de datos para el modelo
data<-list("N"=N,
"y"=df$tiempo_min,
"Genero"=df$genero_usuario,
"Edad"=df$edad_usuario,
"Estacion"=df$estacion_arribo_modificado,
"Dia"=df$dia_sem,
"Hora"=df$hora_retiro_int+1) # Se agrega 1 para recorrer horas (0:23 -> 1:24)
#-Defininicion de inicilizadores (inits)
inits_a<-function(){list(beta0=0,
beta1=rep(0,2),
#beta2=0,
beta2=rep(0,78),
beta3=rep(0,318),
beta4=rep(0,7),
beta5=rep(0,24),
yf=rep(1,N))}
#-Selecting parameters to monitor-
#pars_a<-c("beta0.est","beta1.est","beta2.est","beta3.est","beta4.est","beta5.est","mu","yf")
pars_a<-c("beta0.est","beta1.est","beta2.est","beta3.est","beta4.est","beta5.est","diahora.est","diaedad.est","edadgen.est","edadhora.est","generohora.est","estaciondia.est","estacionhora.est","estacionedad.est","mu","yf")
#- Especificacion del modelo
modelo_normal_itx.txt <-
'
model{
# Verosimilitud
for(i in 1:N){
y[i] ~ dnorm(mu[i],tau)
eta[i]<- beta0+beta1[Genero[i]]+beta2[Edad[i]]+beta3[Estacion[i]]+beta4[Dia[i]]+beta5[Hora[i]]+diahora[Dia[i],Hora[i]]+edadgen[Edad[i],Genero[i]]+edadhora[Edad[i],Hora[i]]+generohora[Genero[i],Hora[i]]+estaciondia[Estacion[i],Dia[i]]+estacionhora[Estacion[i],Hora[i]]+estacionedad[Estacion[i],Edad[i]]
mu[i] <- eta[i] #exp(eta[i])/(1+exp(eta[i]))
}
#Priors
beta0 ~ dnorm(0,0.001) # Intercepto
for (i in 1:2) {beta1[i] ~ dnorm(0,0.01)} # Genero del usuario
#beta2 ~ dnorm(0,100) # Edad del usuario
for (i in 1:78) {beta2[i] ~ dnorm(0,0.01)} # Edad
for (i in 1:318) {beta3[i] ~ dnorm(0,0.01)} # Estacion de arribo
for (i in 1:7) {beta4[i] ~ dnorm(0,0.01)} # Dia de la semana en que ocurrio el viaje
for (i in 1:24) {beta5[i] ~ dnorm(0,0.01)} # Hora en que la bicicleta fue tomada
tau ~ dbeta(1,1) # Precision de la distribucion normal
for (i in 1:7) { for (j in 1:24) {diahora[i,j] ~ dnorm(0,0.01)}} # Interaccion dia y hora
for (i in 1:7) { for (j in 1:78) {diaedad[i,j] ~ dnorm(0,0.01)}} # Interaccion dia y edad
for (i in 1:78) {for (j in 1:2) {edadgen[i,j]~ dnorm(0,0.01)}} # Interaccion edad y genero
for (i in 1:78){for (j in 1:24){edadhora[i,j]~dnorm(0,0.01)}} # Interaccion edad y hora
for (i in 1:2){for (j in 1:24){generohora[i,j]~dnorm(0,0.01)}} # Interaccion genero hora
for (i in 1:318){for (j in 1:7){estaciondia[i,j]~dnorm(0,0.01)}} # Interaccion estacion dia
for (i in 1:318){for (j in 1:24){estacionhora[i,j]~dnorm(0,0.01)}} # Interaccion estacion hora
for (i in 1:318){for (j in 1:78){estacionedad[i,j]~dnorm(0,0.01)}} # Interaccion estacion edad
# Condiciones de estimabilidad
beta0.est <- beta0+mean(beta1[])+mean(beta2[])+mean(beta3[])+mean(beta4[])+mean(beta5[])-mean(diahora[,])-mean(diaedad[,])-mean(edadgen[,])-mean(edadhora[,])-mean(generohora[,])-mean(estaciondia[,])-mean(estacionhora[,])-mean(estacionedad[,])
for (i in 1:2) {beta1.est[i] <- beta1[i]-mean(beta1[])} # Genero del usuario
#beta2.est <- beta2
for (i in 1:78) {beta2.est[i] <- beta2[i]-mean(beta2[])} # Edad del usuario
for (i in 1:318) {beta3.est[i] <- beta3[i]-mean(beta3[])} # Estacion de arribo
for (i in 1:7) {beta4.est[i] <- beta4[i]-mean(beta4[]) + mean(diahora[i,])} # Dia de la semana en que ocurrio el viaje
for (i in 1:24) {beta5.est[i] <- beta5[i]-mean(beta5[])+mean(diahora[,i])} # Hora en que la bicicleta fue tomada
for (i in 1:7) { for (j in 1:24) {diahora.est[i,j] <- diahora[i,j]-mean(diahora[,j])-mean(diahora[i,])+mean(diahora[,]) }} # Interaccion dia y hora
for (i in 1:7) { for (j in 1:78) {diaedad.est[i,j] <- diaedad[i,j]-mean(diaedad[,j])-mean(diaedad[i,])+mean(diaedad[,]) }} # Interaccion dia y edad
for (i in 1:78){for (j in 1:2) {edadgen.est[i,j]<- edadgen[i,j]-mean(edadgen[,j])-mean(edadgen[i,])+mean(edadgen[,]) }} #Interaccion edad y genero
for (i in 1:78){for (j in 1:24) {edadhora.est[i,j]<-edadhora[i,j]-mean(edadhora[,j])-mean(edadhora[i,])+mean(edadhora[,])}} #Interaccion edad y hora
for (i in 1:2){for (j in 1:24) {generohora.est[i,j]<-generohora[i,j]-mean(generohora[,j])-mean(generohora[i,])+mean(generohora[,])}} #Interaccion genero hora
for (i in 1:318){for (j in 1:7){estaciondia.est[i,j]<-estaciondia[i,j]-mean(estaciondia[,j])-mean(estaciondia[i,])+mean(estaciondia[,])}} #Interaccion estacion dia
for (i in 1:318){for (j in 1:24){estacionhora.est[i,j]<-estacionhora[i,j]-mean(estacionhora[,j])-mean(estacionhora[i,])+mean(estacionhora[,])}} #Interaccion estacion hora
for (i in 1:318){for (j in 1:78){estacionedad.est[i,j]<-estacionedad[i,j]-mean(estacionedad[,j])-mean(estacionedad[i,])+mean(estacionedad[,])}} #Interaccion estacion edad
#Predictive
for (i in 1:N) {
yf[i] ~ dnorm(mu[i],tau)
}
}
'
cat(modelo_normal_itx.txt, file = 'modelo_normal_itx.jags')
#--- Jags
# Familia de modelos
model.normal<-jags(data,inits_a, pars_a,model.file="modelo_normal_itx.jags",n.iter=s,n.chains=2,n.burnin=s_cal)
